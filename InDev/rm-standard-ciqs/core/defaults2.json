{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "solutionNameD2": {
            "type": "string",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "iotHubNameD2": {
            "type": "string",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "pcsReleaseVersionD2": {
            "type": "string",
            "metadata": {
                "description": "The release version is used for repoURL for reverse-proxy-dotnet and vmScriptUri"
            }
        }
    },
    "variables": {
    },    
    "resources": [
    ],
    "outputs": {
        "oStorageName" : {
            "type": "string",
            "value": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionNameD2')), 5))]"
        },
        "oDocumentDBName" : {
            "type": "string",
            "value": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionNameD2')), 5))]"
        },
        "oVmName" : {
            "type": "string",
            "value": "[concat('vm-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionNameD2')), 5))]"
        },
        "oEventHubName" : {
            "type": "string",
            "value": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionNameD2')), 5))]"
        },
        "oEventHubNamespaceName" : {
            "type": "string",
            "value": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionNameD2')), 5))]"
        },
        "oEventHubAuthorizationName" : {
            "type": "string",
            "value": "[concat('iothubroutes-', parameters('iotHubNameD2'))]"
        },
        "oStreamingJobsName" : {
            "type": "string",
            "value": "[concat('streamingjobs-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionNameD2')), 5))]"
        },
        "oVmSetupScriptUri" : {
            "type": "string",
            "value": "[concat('https://raw.githubusercontent.com/Azure/pcs-cli/', parameters('pcsReleaseVersionD2'), '/solutions/remotemonitoring/single-vm/setup.sh')]"
        },
        "oApplyRuleFilterJsUdf" : {
            "type": "string",
            "value": "function main(record) {\n    let ruleFunction = new Function('record', record.__rulefilterjs);\n    return ruleFunction(record);\n}"
        },
        "oFlattenMeasurementsJsUdf" : {
            "type": "string",
            "value": "function main(record) {\n\n    let flatRecord = {\n        '__deviceid': record.__deviceid,\n        '__ruleid': record.__ruleid\n    };\n\n    record.measurements.forEach(function (item) {\n        if (item.hasOwnProperty('measurementvalue')) {\n            flatRecord[item.measurementname] = item.measurementvalue;\n        }\n        else {\n            flatRecord[item.measurementname] = {\n                'avg': item.avg,\n                'max': item.max,\n                'min': item.min,\n                'count': item.count\n            };\n        }\n    });\n\n    return flatRecord;\n}"
        },
        "oRemoveUnusedPropertiesJsUdf" : {
            "type": "string",
            "value": "function main(record) {\n    if (record) {\n        record.IoTHub && delete record.IoTHub;\n        record.PartitionId && delete record.PartitionId;\n        record.EventEnqueuedUtcTime && delete record.EventEnqueuedUtcTime;\n        record.EventProcessedUtcTime && delete record.EventProcessedUtcTime;\n    }\n    return record;\n}"
        },
        "oTransformQuery" : {
            "type": "string",
            "value": "WITH TelemetryAndRules AS\n(\n    SELECT\n        T.IotHub.ConnectionDeviceId as __deviceid,\n        T.PartitionId as __partitionid,\n        T.EventEnqueuedUtcTime as __receivedtime,\n        R.Id as __ruleid,\n        R.AggregationWindow,\n        Fields.ArrayValue as MeasurementName,\n        GetRecordPropertyValue(T, Fields.ArrayValue) as MeasurementValue\n    FROM\n        DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime\n        JOIN DeviceGroups G ON T.IoTHub.ConnectionDeviceId = G.DeviceId\n        JOIN Rules R ON R.GroupId = G.GroupId\n        CROSS APPLY GetArrayElements(R.Fields) AS Fields\n),\nAggregateMultipleWindows AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow1minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        TumblingWindow(minute, 1)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow5minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        TumblingWindow(minute, 5)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow10minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        TumblingWindow(minute, 10)\n),\nGroupAggregatedMeasurements AS (\n    SELECT\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.__partitionid,\n        AM.__lastReceivedTime,\n        Collect() AS Measurements\n    FROM\n        AggregateMultipleWindows AM PARTITION BY __partitionid\n    GROUP BY\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.__partitionid,\n        AM.__lastReceivedTime,\n        System.Timestamp\n),\nFlatAggregatedMeasurements AS (\n    SELECT\n        GA.__deviceid,\n        GA.__ruleid,\n        GA.__lastReceivedTime,\n        udf.flattenMeasurements(GA) AS __aggregates\n    FROM\n        GroupAggregatedMeasurements GA PARTITION BY __partitionid\n),\nCombineAggregatedMeasurementsAndRules AS (\n    SELECT\n        FA.__deviceid,\n        FA.__ruleid,\n        FA.__aggregates,\n        FA.__lastReceivedTime,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatAggregatedMeasurements FA PARTITION BY __partitionid\n        JOIN Rules R ON FA.__ruleid = R.Id\n),\nApplyAggregatedRuleFilters AS\n(\n    SELECT\n        CMR.*\n    FROM\n        CombineAggregatedMeasurementsAndRules CMR PARTITION BY __partitionid\n    WHERE TRY_CAST(udf.applyRuleFilter(CMR) AS bigint) = 1\n),\nGroupInstantMeasurements AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.__receivedTime,\n        Collect() AS Measurements\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'instant'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.__receivedTime,\n        System.Timestamp\n),\nFlatInstantMeasurements AS (\n    SELECT\n        GI.__deviceid,\n        GI.__ruleid,\n        GI.__receivedTime,\n        udf.flattenMeasurements(GI) AS __aggregates\n    FROM\n        GroupInstantMeasurements GI PARTITION BY __partitionid\n),\nCombineInstantMeasurementsAndRules as\n(\n    SELECT\n        FI.__deviceid,\n        FI.__ruleid,\n        FI.__receivedtime,\n        FI.__aggregates,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatInstantMeasurements FI PARTITION BY __partitionid\n        JOIN Rules R ON FI.__ruleid = R.Id\n),\nApplyInstantRuleFilters as\n(\n    SELECT\n        CI.*\n    FROM\n        CombineInstantMeasurementsAndRules CI PARTITION BY __partitionid\n    WHERE TRY_CAST(udf.applyRuleFilter(CI) AS bigint) = 1\n),\nCombineAlarms as\n(\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-NMessage' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AA.__description as [rule.description],\n        AA.__severity as [rule.severity],\n        AA.__ruleid as [rule.id],\n        AA.__deviceId as [device.id],\n        AA.__aggregates,\n        AA.__lastReceivedTime as [device.msg.received]\n    FROM\n        ApplyAggregatedRuleFilters AA PARTITION BY __partitionid\n\n    UNION\n\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-1Message' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AI.__description as [rule.description],\n        AI.__severity as [rule.severity],\n        AI.__ruleid as [rule.id],\n        AI.__deviceId as [device.id],\n        AI.__aggregates,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', AI.__receivedTime) as [device.msg.received]\n    FROM\n        ApplyInstantRuleFilters AI PARTITION BY __partitionid\n)\n\nSELECT\n    CA.*\nINTO\n    Alarms\nFROM\n    CombineAlarms CA PARTITION BY __partitionid\n\nSELECT\n        CONCAT(T.IoTHub.ConnectionDeviceId, ';', CAST(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) AS nvarchar(max))) as id,\n        1 as [doc.schemaVersion],\n        'd2cmessage' as [doc.schema],\n        T.IoTHub.ConnectionDeviceId as [device.id],\n        'device-sensors;v1' as [device.msg.schema],\n        'StreamingJobs' as [data.schema],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as [device.msg.created],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) as [device.msg.received],\n        udf.removeUnusedProperties(T) as Data\nINTO\n    Messages\nFROM\n    DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime"
        },
        "oPcsReleaseVersion" : {
            "type": "string",
            "value": "[parameters('pcsReleaseVersionD2')]"
        },
        "oAzureWebsiteName" : {
            "type": "string",
            "value": "[concat(parameters('solutionNameD2'), take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionNameD2')), 5))]"
        }
    }
}
